-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_inverter is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of image_inverter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_inverter,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st11_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st12_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_pp1_stg0_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st19_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st20_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st21_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st22_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st23_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st24_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st25_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st26_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st27_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st28_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st29_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st30_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st31_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFF0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_ready : STD_LOGIC;
    signal ptrInput : STD_LOGIC_VECTOR (31 downto 0);
    signal ptrOutput : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelsN : STD_LOGIC_VECTOR (31 downto 0);
    signal image_inverter_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_WLAST : STD_LOGIC;
    signal mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_inverter_mem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_167 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_indvar_reg_167_pp0_it1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_reg_447_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_230 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_indvar_reg_167_pp0_it2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_indvar_reg_167_pp0_it3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_indvar_reg_167_pp0_it4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_indvar_reg_167_pp0_it5 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_indvar_reg_167_pp0_it6 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar3_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal wordInput_1_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wordInput_1_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal wordOutput_1_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wordOutput_1_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_447_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_447_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_447_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_447_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_447_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next_reg_451 : STD_LOGIC_VECTOR (4 downto 0);
    signal isIter0_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_301_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_463 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_addr_reg_468 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_1_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond5_reg_478_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter_reg_492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_isIter_reg_492_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond5_reg_478_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_is_last_reg_496_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_343 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond5_reg_478_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond5_reg_478_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next4_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal isIter_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_is_last_reg_496_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_is_last_reg_496_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_is_last_reg_496_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_load_1_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_inverter_ap_rst : STD_LOGIC;
    signal buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_171_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_179 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal tmp_10_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wordInput_fu_218_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal wordOutput_fu_232_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_bdd_457 : BOOLEAN;
    signal ap_sig_bdd_472 : BOOLEAN;
    signal ap_sig_bdd_481 : BOOLEAN;

    component image_inverter_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component image_inverter_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ptrInput : OUT STD_LOGIC_VECTOR (31 downto 0);
        ptrOutput : OUT STD_LOGIC_VECTOR (31 downto 0);
        pixelsN : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component image_inverter_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    image_inverter_AXILiteS_s_axi_U : component image_inverter_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => image_inverter_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ptrInput => ptrInput,
        ptrOutput => ptrOutput,
        pixelsN => pixelsN);

    image_inverter_mem_m_axi_U : component image_inverter_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => image_inverter_mem_m_axi_U_ap_dummy_ce,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => mem_ARID,
        I_ARLEN => mem_ARLEN,
        I_ARSIZE => mem_ARSIZE,
        I_ARLOCK => mem_ARLOCK,
        I_ARCACHE => mem_ARCACHE,
        I_ARQOS => mem_ARQOS,
        I_ARPROT => mem_ARPROT,
        I_ARUSER => mem_ARUSER,
        I_ARBURST => mem_ARBURST,
        I_ARREGION => mem_ARREGION,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => mem_AWADDR,
        I_AWID => mem_AWID,
        I_AWLEN => mem_AWLEN,
        I_AWSIZE => mem_AWSIZE,
        I_AWLOCK => mem_AWLOCK,
        I_AWCACHE => mem_AWCACHE,
        I_AWQOS => mem_AWQOS,
        I_AWPROT => mem_AWPROT,
        I_AWUSER => mem_AWUSER,
        I_AWBURST => mem_AWBURST,
        I_AWREGION => mem_AWREGION,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => mem_WDATA,
        I_WID => mem_WID,
        I_WUSER => mem_WUSER,
        I_WLAST => mem_WLAST,
        I_WSTRB => mem_WSTRB,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    buf_U : component image_inverter_buf
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => image_inverter_ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_mem_ARREADY assign process. --
    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st21_fsm_8 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY))) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = mem_ARREADY) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) or ((ap_ST_st21_fsm_8 = ap_CS_fsm) and (ap_const_logic_1 = mem_ARREADY)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_mem_AWREADY assign process. --
    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st28_fsm_15 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY)))) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))))))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_logic_1 = mem_AWREADY) and not((ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) or ((ap_ST_st28_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = mem_AWREADY)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_mem_WREADY assign process. --
    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st28_fsm_15 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY)))) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))))))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))) and (ap_const_logic_1 = mem_WREADY)) or ((ap_ST_st28_fsm_15 = ap_CS_fsm) and (ap_const_logic_1 = mem_WREADY)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_lv1_0 = exitcond1_fu_272_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_252_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = exitcond1_fu_272_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_252_p2))) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_lv1_0 = exitcond1_fu_272_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_252_p2)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and not((ap_const_lv1_0 = exitcond5_fu_334_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st11_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_295_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and (ap_const_lv1_0 = exitcond5_fu_334_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st11_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_295_p2))) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and not((ap_const_lv1_0 = exitcond5_fu_334_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))))) then 
                    ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
                elsif (((ap_ST_st11_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_295_p2)))) then 
                    ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_201 assign process. --
    i_1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_2_fu_252_p2))) then 
                i_1_reg_201 <= i_reg_155;
            elsif (((ap_ST_st31_fsm_18 = ap_CS_fsm) and not((mem_BVALID = ap_const_logic_0)))) then 
                i_1_reg_201 <= i_3_reg_529;
            end if; 
        end if;
    end process;

    -- i_reg_155 assign process. --
    i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st19_fsm_6 = ap_CS_fsm)) then 
                i_reg_155 <= i_2_fu_363_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_155 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- indvar3_reg_190 assign process. --
    indvar3_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and (ap_const_lv1_0 = exitcond5_fu_334_p2))) then 
                indvar3_reg_190 <= indvar_next4_fu_340_p2;
            elsif (((ap_ST_st11_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_295_p2)))) then 
                indvar3_reg_190 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_167 assign process. --
    indvar_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond1_reg_447 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                indvar_reg_167 <= indvar_next_reg_451;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_252_p2)))) then 
                indvar_reg_167 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_179 assign process. --
    j_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_lv1_0 = exitcond1_fu_272_p2)))) then 
                j_reg_179 <= ap_const_lv5_0;
            elsif ((ap_ST_st12_fsm_4 = ap_CS_fsm)) then 
                j_reg_179 <= j_1_reg_463;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                ap_reg_ppstg_exitcond1_reg_447_pp0_it1 <= exitcond1_reg_447;
                ap_reg_ppstg_exitcond1_reg_447_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_447_pp0_it1;
                ap_reg_ppstg_exitcond1_reg_447_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_447_pp0_it2;
                ap_reg_ppstg_exitcond1_reg_447_pp0_it4 <= ap_reg_ppstg_exitcond1_reg_447_pp0_it3;
                ap_reg_ppstg_exitcond1_reg_447_pp0_it5 <= ap_reg_ppstg_exitcond1_reg_447_pp0_it4;
                ap_reg_ppstg_exitcond1_reg_447_pp0_it6 <= ap_reg_ppstg_exitcond1_reg_447_pp0_it5;
                ap_reg_ppstg_indvar_reg_167_pp0_it1 <= indvar_reg_167;
                ap_reg_ppstg_indvar_reg_167_pp0_it2 <= ap_reg_ppstg_indvar_reg_167_pp0_it1;
                ap_reg_ppstg_indvar_reg_167_pp0_it3 <= ap_reg_ppstg_indvar_reg_167_pp0_it2;
                ap_reg_ppstg_indvar_reg_167_pp0_it4 <= ap_reg_ppstg_indvar_reg_167_pp0_it3;
                ap_reg_ppstg_indvar_reg_167_pp0_it5 <= ap_reg_ppstg_indvar_reg_167_pp0_it4;
                ap_reg_ppstg_indvar_reg_167_pp0_it6 <= ap_reg_ppstg_indvar_reg_167_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))))) then
                ap_reg_ppstg_exitcond5_reg_478_pp1_it1 <= exitcond5_reg_478;
                ap_reg_ppstg_exitcond5_reg_478_pp1_it2 <= ap_reg_ppstg_exitcond5_reg_478_pp1_it1;
                ap_reg_ppstg_exitcond5_reg_478_pp1_it3 <= ap_reg_ppstg_exitcond5_reg_478_pp1_it2;
                ap_reg_ppstg_exitcond5_reg_478_pp1_it4 <= ap_reg_ppstg_exitcond5_reg_478_pp1_it3;
                ap_reg_ppstg_isIter_reg_492_pp1_it1 <= isIter_reg_492;
                ap_reg_ppstg_is_last_reg_496_pp1_it1 <= is_last_reg_496;
                ap_reg_ppstg_is_last_reg_496_pp1_it2 <= ap_reg_ppstg_is_last_reg_496_pp1_it1;
                ap_reg_ppstg_is_last_reg_496_pp1_it3 <= ap_reg_ppstg_is_last_reg_496_pp1_it2;
                ap_reg_ppstg_is_last_reg_496_pp1_it4 <= ap_reg_ppstg_is_last_reg_496_pp1_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_295_p2))) then
                buf_addr_reg_468 <= tmp_s_fu_307_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and (ap_const_lv1_0 = exitcond5_reg_478))) then
                buf_load_1_reg_500 <= buf_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                exitcond1_reg_447 <= exitcond1_fu_272_p2;
                indvar_next_reg_451 <= indvar_next_fu_278_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))))) then
                exitcond5_reg_478 <= exitcond5_fu_334_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st21_fsm_8 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY)))) then
                i_3_reg_529 <= i_3_fu_394_p2;
                tmp_11_reg_524 <= tmp_11_fu_389_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = exitcond1_fu_272_p2))) then
                isIter0_reg_456 <= isIter0_fu_284_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and (ap_const_lv1_0 = exitcond5_fu_334_p2))) then
                isIter_reg_492 <= isIter_fu_351_p2;
                is_last_reg_496 <= is_last_fu_357_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_3 = ap_CS_fsm)) then
                j_1_reg_463 <= j_1_fu_301_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_295_p2)))) then
                mem_addr_1_reg_473 <= tmp_8_fu_317_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_2_fu_252_p2)))) then
                mem_addr_reg_441 <= tmp_4_fu_262_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_447_pp0_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) or ((ap_ST_st26_fsm_13 = ap_CS_fsm) and not((mem_RVALID = ap_const_logic_0))))) then
                reg_213 <= mem_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st20_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_6_fu_369_p2)))) then
                tmp_1_reg_513 <= tmp_1_fu_374_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_14 = ap_CS_fsm)) then
                tmp_9_reg_534 <= tmp_9_fu_400_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_433 <= tmp_fu_246_p2;
                wordInput_1_reg_421(0) <= wordInput_1_fu_228_p1(0);
    wordInput_1_reg_421(1) <= wordInput_1_fu_228_p1(1);
    wordInput_1_reg_421(2) <= wordInput_1_fu_228_p1(2);
    wordInput_1_reg_421(3) <= wordInput_1_fu_228_p1(3);
    wordInput_1_reg_421(4) <= wordInput_1_fu_228_p1(4);
    wordInput_1_reg_421(5) <= wordInput_1_fu_228_p1(5);
    wordInput_1_reg_421(6) <= wordInput_1_fu_228_p1(6);
    wordInput_1_reg_421(7) <= wordInput_1_fu_228_p1(7);
    wordInput_1_reg_421(8) <= wordInput_1_fu_228_p1(8);
    wordInput_1_reg_421(9) <= wordInput_1_fu_228_p1(9);
    wordInput_1_reg_421(10) <= wordInput_1_fu_228_p1(10);
    wordInput_1_reg_421(11) <= wordInput_1_fu_228_p1(11);
    wordInput_1_reg_421(12) <= wordInput_1_fu_228_p1(12);
    wordInput_1_reg_421(13) <= wordInput_1_fu_228_p1(13);
    wordInput_1_reg_421(14) <= wordInput_1_fu_228_p1(14);
    wordInput_1_reg_421(15) <= wordInput_1_fu_228_p1(15);
    wordInput_1_reg_421(16) <= wordInput_1_fu_228_p1(16);
    wordInput_1_reg_421(17) <= wordInput_1_fu_228_p1(17);
    wordInput_1_reg_421(18) <= wordInput_1_fu_228_p1(18);
    wordInput_1_reg_421(19) <= wordInput_1_fu_228_p1(19);
    wordInput_1_reg_421(20) <= wordInput_1_fu_228_p1(20);
    wordInput_1_reg_421(21) <= wordInput_1_fu_228_p1(21);
    wordInput_1_reg_421(22) <= wordInput_1_fu_228_p1(22);
    wordInput_1_reg_421(23) <= wordInput_1_fu_228_p1(23);
    wordInput_1_reg_421(24) <= wordInput_1_fu_228_p1(24);
    wordInput_1_reg_421(25) <= wordInput_1_fu_228_p1(25);
    wordInput_1_reg_421(26) <= wordInput_1_fu_228_p1(26);
    wordInput_1_reg_421(27) <= wordInput_1_fu_228_p1(27);
    wordInput_1_reg_421(28) <= wordInput_1_fu_228_p1(28);
    wordInput_1_reg_421(29) <= wordInput_1_fu_228_p1(29);
                wordOutput_1_reg_427(0) <= wordOutput_1_fu_242_p1(0);
    wordOutput_1_reg_427(1) <= wordOutput_1_fu_242_p1(1);
    wordOutput_1_reg_427(2) <= wordOutput_1_fu_242_p1(2);
    wordOutput_1_reg_427(3) <= wordOutput_1_fu_242_p1(3);
    wordOutput_1_reg_427(4) <= wordOutput_1_fu_242_p1(4);
    wordOutput_1_reg_427(5) <= wordOutput_1_fu_242_p1(5);
    wordOutput_1_reg_427(6) <= wordOutput_1_fu_242_p1(6);
    wordOutput_1_reg_427(7) <= wordOutput_1_fu_242_p1(7);
    wordOutput_1_reg_427(8) <= wordOutput_1_fu_242_p1(8);
    wordOutput_1_reg_427(9) <= wordOutput_1_fu_242_p1(9);
    wordOutput_1_reg_427(10) <= wordOutput_1_fu_242_p1(10);
    wordOutput_1_reg_427(11) <= wordOutput_1_fu_242_p1(11);
    wordOutput_1_reg_427(12) <= wordOutput_1_fu_242_p1(12);
    wordOutput_1_reg_427(13) <= wordOutput_1_fu_242_p1(13);
    wordOutput_1_reg_427(14) <= wordOutput_1_fu_242_p1(14);
    wordOutput_1_reg_427(15) <= wordOutput_1_fu_242_p1(15);
    wordOutput_1_reg_427(16) <= wordOutput_1_fu_242_p1(16);
    wordOutput_1_reg_427(17) <= wordOutput_1_fu_242_p1(17);
    wordOutput_1_reg_427(18) <= wordOutput_1_fu_242_p1(18);
    wordOutput_1_reg_427(19) <= wordOutput_1_fu_242_p1(19);
    wordOutput_1_reg_427(20) <= wordOutput_1_fu_242_p1(20);
    wordOutput_1_reg_427(21) <= wordOutput_1_fu_242_p1(21);
    wordOutput_1_reg_427(22) <= wordOutput_1_fu_242_p1(22);
    wordOutput_1_reg_427(23) <= wordOutput_1_fu_242_p1(23);
    wordOutput_1_reg_427(24) <= wordOutput_1_fu_242_p1(24);
    wordOutput_1_reg_427(25) <= wordOutput_1_fu_242_p1(25);
    wordOutput_1_reg_427(26) <= wordOutput_1_fu_242_p1(26);
    wordOutput_1_reg_427(27) <= wordOutput_1_fu_242_p1(27);
    wordOutput_1_reg_427(28) <= wordOutput_1_fu_242_p1(28);
    wordOutput_1_reg_427(29) <= wordOutput_1_fu_242_p1(29);
            end if;
        end if;
    end process;
    wordInput_1_reg_421(31 downto 30) <= "00";
    wordOutput_1_reg_427(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mem_RVALID, mem_BVALID, ap_reg_ppiten_pp0_it0, exitcond1_reg_447, isIter0_reg_456, ap_sig_ioackin_mem_ARREADY, ap_reg_ppiten_pp0_it1, ap_sig_bdd_230, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, tmp_2_fu_252_p2, exitcond1_fu_272_p2, exitcond_fu_295_p2, exitcond5_fu_334_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppstg_isIter_reg_492_pp1_it1, ap_sig_ioackin_mem_AWREADY, ap_sig_ioackin_mem_WREADY, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp1_it4, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5, tmp_6_fu_369_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_252_p2))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_7;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_lv1_0 = exitcond1_fu_272_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_lv1_0 = exitcond1_fu_272_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st11_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_295_p2))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_4;
                end if;
            when ap_ST_st12_fsm_4 => 
                ap_NS_fsm <= ap_ST_st11_fsm_3;
            when ap_ST_pp1_stg0_fsm_5 => 
                if ((not(((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it4)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and not((ap_const_lv1_0 = exitcond5_fu_334_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                elsif ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it4))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5)))) and not((ap_const_lv1_0 = exitcond5_fu_334_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_5;
                end if;
            when ap_ST_st19_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st20_fsm_7 => 
                if ((ap_const_lv1_0 = tmp_6_fu_369_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_8;
                end if;
            when ap_ST_st21_fsm_8 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st22_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_8;
                end if;
            when ap_ST_st22_fsm_9 => 
                ap_NS_fsm <= ap_ST_st23_fsm_10;
            when ap_ST_st23_fsm_10 => 
                ap_NS_fsm <= ap_ST_st24_fsm_11;
            when ap_ST_st24_fsm_11 => 
                ap_NS_fsm <= ap_ST_st25_fsm_12;
            when ap_ST_st25_fsm_12 => 
                ap_NS_fsm <= ap_ST_st26_fsm_13;
            when ap_ST_st26_fsm_13 => 
                if (not((mem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_13;
                end if;
            when ap_ST_st27_fsm_14 => 
                ap_NS_fsm <= ap_ST_st28_fsm_15;
            when ap_ST_st28_fsm_15 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_15;
                end if;
            when ap_ST_st29_fsm_16 => 
                ap_NS_fsm <= ap_ST_st30_fsm_17;
            when ap_ST_st30_fsm_17 => 
                ap_NS_fsm <= ap_ST_st31_fsm_18;
            when ap_ST_st31_fsm_18 => 
                if (not((mem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_6_fu_369_p2)
    begin
        if (((ap_ST_st20_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_369_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_6_fu_369_p2)
    begin
        if (((ap_ST_st20_fsm_7 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_6_fu_369_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(mem_RVALID, ap_reg_ppstg_exitcond1_reg_447_pp0_it5)
    begin
                ap_sig_bdd_230 <= ((mem_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_447_pp0_it5));
    end process;


    -- ap_sig_bdd_343 assign process. --
    ap_sig_bdd_343_assign_proc : process(mem_BVALID, ap_reg_ppstg_exitcond5_reg_478_pp1_it4, ap_reg_ppstg_is_last_reg_496_pp1_it4)
    begin
                ap_sig_bdd_343 <= ((mem_BVALID = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it4) and not((ap_const_lv1_0 = ap_reg_ppstg_is_last_reg_496_pp1_it4)));
    end process;


    -- ap_sig_bdd_457 assign process. --
    ap_sig_bdd_457_assign_proc : process(ap_CS_fsm, exitcond1_reg_447, isIter0_reg_456, ap_reg_ppiten_pp0_it1, ap_sig_bdd_230, ap_reg_ppiten_pp0_it6)
    begin
                ap_sig_bdd_457 <= ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))));
    end process;


    -- ap_sig_bdd_472 assign process. --
    ap_sig_bdd_472_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppstg_isIter_reg_492_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5)
    begin
                ap_sig_bdd_472 <= ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))));
    end process;


    -- ap_sig_bdd_481 assign process. --
    ap_sig_bdd_481_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5)
    begin
                ap_sig_bdd_481 <= ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))));
    end process;


    -- ap_sig_ioackin_mem_ARREADY assign process. --
    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_mem_AWREADY assign process. --
    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_mem_WREADY assign process. --
    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- buf_address0 assign process. --
    buf_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it7, buf_addr_reg_468, ap_reg_ppiten_pp1_it0, tmp_13_fu_290_p1, tmp_s_fu_307_p1, tmp_14_fu_346_p1)
    begin
        if ((ap_ST_st12_fsm_4 = ap_CS_fsm)) then 
            buf_address0 <= buf_addr_reg_468;
        elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))) then 
            buf_address0 <= tmp_13_fu_290_p1(4 - 1 downto 0);
        elsif (((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            buf_address0 <= tmp_14_fu_346_p1(4 - 1 downto 0);
        elsif ((ap_ST_st11_fsm_3 = ap_CS_fsm)) then 
            buf_address0 <= tmp_s_fu_307_p1(4 - 1 downto 0);
        else 
            buf_address0 <= "XXXX";
        end if; 
    end process;


    -- buf_ce0 assign process. --
    buf_ce0_assign_proc : process(ap_CS_fsm, exitcond1_reg_447, isIter0_reg_456, ap_sig_ioackin_mem_ARREADY, ap_reg_ppiten_pp0_it1, ap_sig_bdd_230, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp1_it0, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppstg_isIter_reg_492_pp1_it1, ap_sig_ioackin_mem_AWREADY, ap_sig_ioackin_mem_WREADY, ap_reg_ppiten_pp1_it2, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5)
    begin
        if (((ap_ST_st11_fsm_3 = ap_CS_fsm) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))))) or (ap_ST_st12_fsm_4 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))))) then 
            buf_ce0 <= ap_const_logic_1;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_d0 assign process. --
    buf_d0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it7, reg_213, tmp_10_fu_327_p2)
    begin
        if ((ap_ST_st12_fsm_4 = ap_CS_fsm)) then 
            buf_d0 <= tmp_10_fu_327_p2;
        elsif (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))) then 
            buf_d0 <= reg_213;
        else 
            buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- buf_we0 assign process. --
    buf_we0_assign_proc : process(ap_CS_fsm, exitcond1_reg_447, isIter0_reg_456, ap_sig_ioackin_mem_ARREADY, ap_reg_ppiten_pp0_it1, ap_sig_bdd_230, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond1_reg_447_pp0_it6)
    begin
        if (((ap_ST_st12_fsm_4 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_447_pp0_it6)))) then 
            buf_we0 <= ap_const_logic_1;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_272_p2 <= "1" when (indvar_phi_fu_171_p4 = ap_const_lv5_10) else "0";
    exitcond5_fu_334_p2 <= "1" when (indvar3_reg_190 = ap_const_lv5_10) else "0";
    exitcond_fu_295_p2 <= "1" when (j_reg_179 = ap_const_lv5_10) else "0";
    i_2_fu_363_p2 <= std_logic_vector(unsigned(i_reg_155) + unsigned(ap_const_lv32_10));
    i_3_fu_394_p2 <= std_logic_vector(unsigned(i_1_reg_201) + unsigned(ap_const_lv32_1));
    image_inverter_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- image_inverter_ap_rst assign process. --
    image_inverter_ap_rst_assign_proc : process(ap_rst_n)
    begin
                image_inverter_ap_rst <= not(ap_rst_n);
    end process;

    image_inverter_mem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    indvar_next4_fu_340_p2 <= std_logic_vector(unsigned(indvar3_reg_190) + unsigned(ap_const_lv5_1));
    indvar_next_fu_278_p2 <= std_logic_vector(unsigned(indvar_phi_fu_171_p4) + unsigned(ap_const_lv5_1));

    -- indvar_phi_fu_171_p4 assign process. --
    indvar_phi_fu_171_p4_assign_proc : process(ap_CS_fsm, indvar_reg_167, exitcond1_reg_447, ap_reg_ppiten_pp0_it1, indvar_next_reg_451)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond1_reg_447 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_171_p4 <= indvar_next_reg_451;
        else 
            indvar_phi_fu_171_p4 <= indvar_reg_167;
        end if; 
    end process;

    isIter0_fu_284_p2 <= "1" when (indvar_phi_fu_171_p4 = ap_const_lv5_0) else "0";
    isIter_fu_351_p2 <= "1" when (indvar3_reg_190 = ap_const_lv5_0) else "0";
    is_last_fu_357_p2 <= "1" when (indvar3_reg_190 = ap_const_lv5_F) else "0";
    j_1_fu_301_p2 <= std_logic_vector(unsigned(j_reg_179) + unsigned(ap_const_lv5_1));

    -- mem_ARADDR assign process. --
    mem_ARADDR_assign_proc : process(ap_CS_fsm, mem_addr_reg_441, tmp_5_fu_379_p1, ap_reg_ioackin_mem_ARREADY, ap_sig_bdd_457)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if ((ap_ST_st21_fsm_8 = ap_CS_fsm)) then 
                mem_ARADDR <= tmp_5_fu_379_p1(32 - 1 downto 0);
            elsif (ap_sig_bdd_457) then 
                mem_ARADDR <= mem_addr_reg_441;
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_ARBURST <= ap_const_lv2_0;
    mem_ARCACHE <= ap_const_lv4_0;
    mem_ARID <= ap_const_lv1_0;

    -- mem_ARLEN assign process. --
    mem_ARLEN_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_mem_ARREADY, ap_sig_bdd_457)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if ((ap_ST_st21_fsm_8 = ap_CS_fsm)) then 
                mem_ARLEN <= ap_const_lv32_1;
            elsif (ap_sig_bdd_457) then 
                mem_ARLEN <= ap_const_lv32_10;
            else 
                mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_ARLOCK <= ap_const_lv2_0;
    mem_ARPROT <= ap_const_lv3_0;
    mem_ARQOS <= ap_const_lv4_0;
    mem_ARREGION <= ap_const_lv4_0;
    mem_ARSIZE <= ap_const_lv3_0;
    mem_ARUSER <= ap_const_lv1_0;

    -- mem_ARVALID assign process. --
    mem_ARVALID_assign_proc : process(ap_CS_fsm, exitcond1_reg_447, isIter0_reg_456, ap_reg_ppiten_pp0_it1, ap_sig_bdd_230, ap_reg_ppiten_pp0_it6, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_ST_st21_fsm_8 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- mem_AWADDR assign process. --
    mem_AWADDR_assign_proc : process(ap_CS_fsm, mem_addr_1_reg_473, tmp_12_fu_406_p1, ap_reg_ioackin_mem_AWREADY, ap_sig_bdd_472)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then
            if ((ap_ST_st28_fsm_15 = ap_CS_fsm)) then 
                mem_AWADDR <= tmp_12_fu_406_p1(32 - 1 downto 0);
            elsif (ap_sig_bdd_472) then 
                mem_AWADDR <= mem_addr_1_reg_473;
            else 
                mem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_AWBURST <= ap_const_lv2_0;
    mem_AWCACHE <= ap_const_lv4_0;
    mem_AWID <= ap_const_lv1_0;

    -- mem_AWLEN assign process. --
    mem_AWLEN_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_mem_AWREADY, ap_sig_bdd_472)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then
            if ((ap_ST_st28_fsm_15 = ap_CS_fsm)) then 
                mem_AWLEN <= ap_const_lv32_1;
            elsif (ap_sig_bdd_472) then 
                mem_AWLEN <= ap_const_lv32_10;
            else 
                mem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_AWLOCK <= ap_const_lv2_0;
    mem_AWPROT <= ap_const_lv3_0;
    mem_AWQOS <= ap_const_lv4_0;
    mem_AWREGION <= ap_const_lv4_0;
    mem_AWSIZE <= ap_const_lv3_0;
    mem_AWUSER <= ap_const_lv1_0;

    -- mem_AWVALID assign process. --
    mem_AWVALID_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppstg_isIter_reg_492_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) or ((ap_ST_st28_fsm_15 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- mem_BREADY assign process. --
    mem_BREADY_assign_proc : process(ap_CS_fsm, mem_BVALID, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppstg_isIter_reg_492_pp1_it1, ap_sig_ioackin_mem_AWREADY, ap_sig_ioackin_mem_WREADY, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond5_reg_478_pp1_it4, ap_reg_ppstg_is_last_reg_496_pp1_it4, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5)
    begin
        if ((((ap_ST_st31_fsm_18 = ap_CS_fsm) and not((mem_BVALID = ap_const_logic_0))) or ((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it4) and not((ap_const_lv1_0 = ap_reg_ppstg_is_last_reg_496_pp1_it4)) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5) and not((((((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter_reg_492_pp1_it1)) and (ap_const_logic_0 = ap_sig_ioackin_mem_AWREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_0 = ap_sig_ioackin_mem_WREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) or (ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))))))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- mem_RREADY assign process. --
    mem_RREADY_assign_proc : process(ap_CS_fsm, mem_RVALID, exitcond1_reg_447, isIter0_reg_456, ap_sig_ioackin_mem_ARREADY, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_447_pp0_it5, ap_sig_bdd_230, ap_reg_ppiten_pp0_it6)
    begin
        if ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_447_pp0_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((((exitcond1_reg_447 = ap_const_lv1_0) and not((ap_const_lv1_0 = isIter0_reg_456)) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_230 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) or ((ap_ST_st26_fsm_13 = ap_CS_fsm) and not((mem_RVALID = ap_const_logic_0))))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- mem_WDATA assign process. --
    mem_WDATA_assign_proc : process(ap_CS_fsm, buf_load_1_reg_500, tmp_9_reg_534, ap_reg_ioackin_mem_WREADY, ap_sig_bdd_481)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then
            if ((ap_ST_st28_fsm_15 = ap_CS_fsm)) then 
                mem_WDATA <= tmp_9_reg_534;
            elsif (ap_sig_bdd_481) then 
                mem_WDATA <= buf_load_1_reg_500;
            else 
                mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_WID <= ap_const_lv1_0;
    mem_WLAST <= ap_const_logic_0;
    mem_WSTRB <= ap_const_lv4_F;
    mem_WUSER <= ap_const_lv1_0;

    -- mem_WVALID assign process. --
    mem_WVALID_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond5_reg_478_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_bdd_343, ap_reg_ppiten_pp1_it5, ap_reg_ioackin_mem_WREADY)
    begin
        if ((((ap_ST_pp1_stg0_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_478_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_343 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it5))) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) or ((ap_ST_st28_fsm_15 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_327_p2 <= (buf_q0 xor ap_const_lv32_FFFFFFFF);
    tmp_11_fu_389_p2 <= std_logic_vector(unsigned(i_1_reg_201) + unsigned(wordOutput_1_reg_427));
    tmp_12_fu_406_p1 <= std_logic_vector(resize(unsigned(tmp_11_reg_524),64));
    tmp_13_fu_290_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_167_pp0_it6),64));
    tmp_14_fu_346_p1 <= std_logic_vector(resize(unsigned(indvar3_reg_190),64));
    tmp_1_fu_374_p2 <= std_logic_vector(unsigned(i_1_reg_201) + unsigned(wordInput_1_reg_421));
    tmp_2_fu_252_p2 <= "1" when (signed(i_reg_155) < signed(tmp_reg_433)) else "0";
    tmp_3_fu_257_p2 <= std_logic_vector(unsigned(i_reg_155) + unsigned(wordInput_1_reg_421));
    tmp_4_fu_262_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_257_p2),64));
    tmp_5_fu_379_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_513),64));
    tmp_6_fu_369_p2 <= "1" when (unsigned(i_1_reg_201) < unsigned(pixelsN)) else "0";
    tmp_7_fu_312_p2 <= std_logic_vector(unsigned(i_reg_155) + unsigned(wordOutput_1_reg_427));
    tmp_8_fu_317_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_312_p2),64));
    tmp_9_fu_400_p2 <= (reg_213 xor ap_const_lv32_FFFFFFFF);
    tmp_fu_246_p2 <= std_logic_vector(unsigned(pixelsN) + unsigned(ap_const_lv32_FFFFFFF0));
    tmp_s_fu_307_p1 <= std_logic_vector(resize(unsigned(j_reg_179),64));
    wordInput_1_fu_228_p1 <= std_logic_vector(resize(unsigned(wordInput_fu_218_p4),32));
    wordInput_fu_218_p4 <= ptrInput(31 downto 2);
    wordOutput_1_fu_242_p1 <= std_logic_vector(resize(unsigned(wordOutput_fu_232_p4),32));
    wordOutput_fu_232_p4 <= ptrOutput(31 downto 2);
end behav;
